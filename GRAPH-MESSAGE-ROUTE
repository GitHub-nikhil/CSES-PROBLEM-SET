//message route
vector<int> list[100003];
vector<int> visited(100003);
vector<int> par(100003,-1);
void bfs(int n){
    visited[1] = 1;
    queue<int> q;
    q.push(1);
    
    while(!q.empty()){
        int ele = q.front();
        q.pop();
        if(ele == n) break;
        
        for(int i = 0;i<list[ele].size();i++){
            int curr=list[ele][i];
            if(!visited[curr]){
                q.push(curr);
                par[curr] = ele;
                visited[curr] = 1;
                }
            }
        }
//        cout<<"YES"<<endl;
        stack<int> ans;
        if(visited[n] == -1) cout<<"IMPOSSIBLE"<<endl;
        else{
            ans.push(n);
            int start = n;
            while(start!=1){
                start = par[start];
                if(start == -1){
                    cout<<"IMPOSSIBLE"<<endl;
                    return;
                    }
                ans.push(start);
                }
                
                cout<<ans.size()<<endl;
                while(!ans.empty()){
                    cout<<ans.top()<<" ";
                    ans.pop();
                    }
                    cout<<endl;
            }
            
            return;
    }
int main(){
    int n,m;
    cin>>n>>m;
    
    for(int i = 1;i<=m;i++){
        int u,v;
        cin>>u>>v;
        list[u].push_back(v);
        list[v].push_back(u);
        }
        bfs(n);
    }
